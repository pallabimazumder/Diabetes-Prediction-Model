import pandas as pd
import numpy as np
df = pd.read_csv('diabetes.csv')

df.head()

df.tail()

df.shape

df.isnull().sum()

df.describe()

df.info()

df.cov()

df.corr()

x = df.iloc[:,0:8]

y = df.iloc[:,8]

(df['Outcome']== 1).sum()

(df['Outcome'] == 0).sum()

import seaborn as sns
sns.countplot(x='Outcome', data=df)

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

model = DecisionTreeClassifier()
model.fit(x_train, y_train)
prediction1 = model.predict(x_test)
accuracy1 = accuracy_score(y_test, prediction1)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

model = RandomForestClassifier()
model.fit(x_train, y_train)
prediction2 = model.predict(x_test)
accuracy2 = accuracy_score(y_test, prediction2)
accuracy2

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25)

model = LogisticRegression()
model.fit(x_train, y_train)
prediction3 = model.predict(x_test)
accuracy3 = accuracy_score(y_test, prediction3)
accuracy3

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

accuracy4 = {}
accuracy_list = []

k_range = (1,201)
for k in k_range:
    model = KNeighborsClassifier()
    model.fit(x_train, y_train)
    prediction4 = model.predict(x_test)
    accuracy4 = accuracy_score(y_test, prediction4)
    accuracy_list.append(accuracy_score(y_test, prediction4))

import matplotlib.pyplot as plt
plt.plot(k_range, accuracy_list)
plt.xlabel('k_range')
plt.ylabel('accuracy_list')
plt.title('Accuracy Visualization Graph')
plt.grid()
plt.show()

pd.DataFrame({'actual': y_test, 'prediction' : prediction4})
